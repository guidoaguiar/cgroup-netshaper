name: Code Quality

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

jobs:
  checkpatch:
    name: Linux Kernel Checkpatch
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for checking commits

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget perl

      - name: Download checkpatch script
        run: |
          wget https://raw.githubusercontent.com/torvalds/linux/master/scripts/checkpatch.pl
          wget https://raw.githubusercontent.com/torvalds/linux/master/scripts/spelling.txt
          chmod +x checkpatch.pl

      - name: Run checkpatch on source files
        id: checkpatch
        run: |
          echo "Checking code style with checkpatch.pl"
          find src -name "*.c" -o -name "*.h" | xargs ./checkpatch.pl --no-tree --file --strict
          
      - name: Check commit message format
        if: github.event_name == 'pull_request'
        id: commit-check
        run: |
          echo "Checking commit message format"
          git log --format=%B -n 1 ${{ github.event.pull_request.head.sha }} | ./checkpatch.pl --no-tree --ignore FILE_PATH_CHANGES,GERRIT_CHANGE_ID --no-signoff
      
      - name: Report checkpatch status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'linux-kernel-checkpatch',
              head_sha: context.sha,
              status: 'completed',
              conclusion: "${{ job.status }}".toLowerCase(),
              output: {
                title: "Linux Kernel Checkpatch Results",
                summary: "${{ job.status }}" === "success" 
                  ? "✅ Code follows kernel coding style conventions" 
                  : "❌ Code style issues detected - see logs for details"
              }
            })
  
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc make linux-headers-$(uname -r) sparse cppcheck

      - name: Run sparse
        id: sparse
        run: |
          make C=2 CF="-D__CHECK_ENDIAN__"

      - name: Run cppcheck
        id: cppcheck
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=1 src/
      
      - name: Report static analysis status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'static-analysis',
              head_sha: context.sha,
              status: 'completed',
              conclusion: "${{ job.status }}".toLowerCase(),
              output: {
                title: "Static Analysis Results",
                summary: "${{ job.status }}" === "success" 
                  ? "✅ Static analysis passed with no issues" 
                  : "❌ Static analysis detected potential issues - see logs for details"
              }
            })
          
  kernel-coding-style:
    name: Kernel Coding Style
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git indent

      - name: Check indentation style
        id: indent-check
        run: |
          find src -name "*.c" -o -name "*.h" | while read file; do
            echo "Checking $file"
            indent -linux "$file" -o "$file.linux"
            diff -u "$file" "$file.linux" || {
              echo "⚠️ $file does not follow Linux kernel coding style"
              echo "See differences above"
              exit 1
            }
            rm -f "$file.linux"
          done
          echo "✅ All files follow Linux kernel coding style"
      
      - name: Report coding style status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'kernel-coding-style',
              head_sha: context.sha,
              status: 'completed',
              conclusion: "${{ job.status }}".toLowerCase(),
              output: {
                title: "Kernel Coding Style Results",
                summary: "${{ job.status }}" === "success" 
                  ? "✅ Code follows Linux kernel formatting conventions" 
                  : "❌ Code formatting issues detected - see logs for details"
              }
            })
            
  combined-status:
    name: Combined Check Status
    runs-on: ubuntu-latest
    needs: [checkpatch, static-analysis, kernel-coding-style]
    if: always()
    permissions:
      checks: write
      pull-requests: write
      statuses: write
    
    steps:
      - name: Determine combined status
        id: status
        run: |
          if [[ "${{ needs.checkpatch.result }}" == "success" && "${{ needs.static-analysis.result }}" == "success" && "${{ needs.kernel-coding-style.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
      
      - name: Report combined status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: "${{ steps.status.outputs.status }}",
              context: "Code Quality Checks",
              description: "${{ steps.status.outputs.status }}" === "success" ? "All code quality checks have passed" : "One or more code quality checks have failed"
            })